# 📚 FINAL SYSTEM DOCUMENTATION
## Sistem Arsip Digital - Government Archive Management System

---

##  **PROJECT OVERVIEW**

### **System Purpose**
Sistem arsip digital untuk instansi pemerintah yang mengelola dokumen arsip sesuai dengan JRA (Jadwal Retensi Arsip) Pergub 1 & 30 Jawa Timur.

### **Technology Stack**
- **Backend**: Laravel 12.x (PHP 8.4.1)
- **Database**: PostgreSQL 15+
- **Frontend**: Blade Templates + Tailwind CSS + Alpine.js
- **Authentication**: Laravel Breeze + Spatie Laravel Permission
- **Cache**: Redis 7+
- **Web Server**: Nginx 1.24+

### **User Roles**
```
Admin (Super User)     → Full system access + user management
Staff (Pegawai TU)    → Archive + storage management
Intern (Mahasiswa)    → Basic archive operations
```

---

## 🏗️ **SYSTEM ARCHITECTURE**

### **Database Schema**
```sql
-- Core Tables
archives              # Archive records with status tracking
categories            # Archive categories (JRA categories)
classifications       # Archive classifications (sub-categories)
storage_racks         # Physical storage racks
storage_boxes         # Storage boxes within racks
storage_rows          # Storage rows within racks
users                 # User accounts with role-based access
permissions           # System permissions
roles                 # User roles (admin, staff, intern)

-- Key Relationships
archives.category_id → categories.id
archives.classification_id → classifications.id
archives.created_by → users.id
archives.rack_number → storage_racks.id
archives.box_number → storage_boxes.box_number
```

### **File Structure**
```
archivy/
├── app/
│   ├── Http/Controllers/
│   │   ├── Admin/          # Admin-specific controllers
│   │   ├── Staff/          # Staff-specific controllers
│   │   └── Intern/         # Intern-specific controllers
│   ├── Models/             # Eloquent models
│   ├── Services/           # Business logic services
│   ├── Jobs/              # Background jobs
│   └── Exports/           # Excel/PDF export classes
├── resources/views/
│   ├── admin/             # Admin views
│   ├── staff/             # Staff views
│   └── intern/            # Intern views
├── routes/
│   └── web.php            # Route definitions
└── database/
    ├── migrations/        # Database migrations
    └── seeders/          # Database seeders
```

---

## 🔧 **CORE FEATURES**

### **1. Archive Management**
```php
// Archive Model with automatic status calculation
class Archive extends Model
{
    // Relationships
    public function category(): BelongsTo
    public function classification(): BelongsTo
    public function createdByUser(): BelongsTo
    public function storageBox(): BelongsTo

    // Accessors
    public function getFormattedIndexNumberAttribute()
    public static function getNextFileNumber($boxNumber)

    // Scopes
    public function scopeAktif($query)
    public function scopeInaktif($query)
    public function scopePermanen($query)
    public function scopeMusnah($query)
}
```

**Key Features:**
- **Automatic Status Calculation**: Based on retention periods
- **Formatted Archive Numbers**: Different formats per classification
- **File Number Generation**: Gap-filling algorithm
- **Role-based Access**: Users can only manage their own archives

### **2. Storage Management**
```php
// Storage hierarchy: Rack → Row → Box → File
class StorageRack extends Model
{
    public function boxes(): HasMany
    public function rows(): HasMany

    // Status calculations
    public function getUtilizationPercentage(): float
    public function getAvailableBoxesCount(): int
    public function getPartiallyFullBoxesCount(): int
    public function getFullBoxesCount(): int
}
```

**Key Features:**
- **Physical Storage Tracking**: Rack, row, box, file number
- **Capacity Management**: Box status (Empty, Available, Partially Full, Full)
- **Auto-generation**: Next available box/file numbers
- **Visual Grid**: Real-time storage preview

### **3. Role-based Access Control**
```php
// Permission system
Admin:     Full access to all features
Staff:     Archive management + storage + reports
Intern:    Basic archive operations only

// Data filtering by role
if (auth()->user()->role_type === 'staff') {
    $query->whereIn('created_by', [auth()->id()] + User::role('intern')->pluck('id')->toArray());
}
```

---

## 📊 **BUSINESS LOGIC**

### **1. Archive Number Formatting**
```php
public function getFormattedIndexNumberAttribute()
{
    // Rule 1: Dinilai Kembali status
    if ($this->status == 'Dinilai Kembali') {
        return $this->index_number;
    }

    // Rule 2: LAINNYA classification (manual input)
    if ($this->classification && $this->classification->code == 'LAINNYA') {
        return $this->index_number;
    }

    // Rule 3: Standard format
    if ($this->classification && $this->kurun_waktu_start) {
        return $this->classification->code . '/' . $this->index_number . '/' . $this->kurun_waktu_start->format('Y');
    }

    return $this->index_number;
}
```

### **2. File Number Generation**
```php
public static function getNextFileNumber($boxNumber)
{
    // Get existing file numbers in box
    $existingFileNumbers = static::where('box_number', $boxNumber)
        ->pluck('file_number')->sort()->values();

    if ($existingFileNumbers->isEmpty()) {
        return 1;
    }

    // Gap-filling algorithm
    $expectedFileNumber = 1;
    foreach ($existingFileNumbers as $existingFileNumber) {
        if ($existingFileNumber > $expectedFileNumber) {
            return $expectedFileNumber; // Found a gap
        }
        $expectedFileNumber = $existingFileNumber + 1;
    }

    return $existingFileNumbers->max() + 1; // Next number
}
```

### **3. Storage Status Calculation**
```php
// Box status based on capacity
public function getBoxStatusAttribute()
{
    $capacity = $this->capacity;
    $count = $this->archive_count;

    if ($count == 0) return 'Kosong';
    if ($count < $capacity / 2) return 'Tersedia';
    if ($count < $capacity) return 'Sebagian';
    return 'Penuh';
}
```

---

## 🎨 **FRONTEND PATTERNS**

### **1. Theme Colors by Role**
```css
/* Admin Theme - Blue */
.admin-theme { @apply bg-blue-600 text-white; }
.admin-button { @apply bg-blue-600 hover:bg-blue-700; }

/* Staff Theme - Teal */
.staff-theme { @apply bg-teal-600 text-white; }
.staff-button { @apply bg-teal-600 hover:bg-teal-700; }

/* Intern Theme - Orange */
.intern-theme { @apply bg-orange-600 text-white; }
.intern-button { @apply bg-orange-600 hover:bg-orange-700; }
```

### **2. JavaScript Patterns**
```javascript
// SweetAlert2 for notifications
Swal.fire({
    title: 'Success',
    text: 'Operation completed successfully',
    icon: 'success',
    confirmButtonText: 'OK'
});

// AJAX with error handling
fetch('/api/endpoint')
    .then(response => response.json())
    .then(data => {
        // Handle success
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'Something went wrong', 'error');
    });
```

### **3. Form Validation**
```php
class StoreArchiveRequest extends FormRequest
{
    public function rules(): array
    {
        return [
            'description' => 'required|string|max:255',
            'category_id' => 'required|exists:categories,id',
            'classification_id' => 'required|exists:classifications,id',
            'status' => 'required|in:Aktif,Inaktif,Dinilai Kembali',
            'kurun_waktu_start' => 'required|date',
            'jumlah_berkas' => 'required|integer|min:1',
        ];
    }
}
```

---

## 🔐 **SECURITY PATTERNS**

### **1. Role-based Access Control**
```php
// Middleware
class RoleMiddleware
{
    public function handle($request, Closure $next, $role)
    {
        if (!auth()->user()->hasRole($role)) {
            return redirect()->back()->with('error', 'Akses ditolak');
        }
        return $next($request);
    }
}

// Controller level permission check
if (auth()->user()->role_type !== 'admin' && $archive->created_by !== auth()->id()) {
    return redirect()->back()->with('error', 'Tidak memiliki izin');
}
```

### **2. Data Filtering**
```php
// Role-based data filtering
if (auth()->user()->role_type === 'staff') {
    $query->whereIn('created_by', [auth()->id()] + User::role('intern')->pluck('id')->toArray());
}
```

### **3. Input Validation**
```php
// Always validate inputs
'description' => 'required|string|max:255',
'category_id' => 'required|exists:categories,id',
'classification_id' => 'required|exists:classifications,id',
```

---

## 🚀 **DEPLOYMENT CONFIGURATION**

### **1. Environment Variables**
```bash
# Production settings
APP_NAME="Sistem Arsip Digital"
APP_ENV=production
APP_DEBUG=false
APP_URL=https://arsip.domain.go.id

# Database
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=arsip_production
DB_USERNAME=arsip_user
DB_PASSWORD=YOUR_SECURE_PASSWORD

# Cache & Session
CACHE_DRIVER=redis
SESSION_DRIVER=redis
QUEUE_CONNECTION=redis

# Security
SESSION_SECURE_COOKIE=true
SESSION_HTTP_ONLY=true
SESSION_SAME_SITE=strict
```

### **2. File Permissions**
```bash
# Critical files
chmod 600 .env
chmod 644 storage/logs/
chmod 755 storage/framework/
chmod 755 bootstrap/cache/

# Application directories
chown -R www-data:www-data storage/
chown -R www-data:www-data bootstrap/cache/
```

### **3. Nginx Configuration**
```nginx
server {
    listen 443 ssl http2;
    server_name arsip.domain.go.id;

    root /var/www/archivy/public;
    index index.php;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
```

---

##  **TESTING PATTERNS**

### **1. Feature Tests**
```php
class ArchiveTest extends TestCase
{
    public function test_staff_can_create_archive()
    {
        $user = User::factory()->create(['role_type' => 'staff']);

        $response = $this->actingAs($user)
            ->post('/staff/archives', [
                'description' => 'Test Archive',
                'category_id' => 1,
                'classification_id' => 1,
            ]);

        $response->assertRedirect();
        $this->assertDatabaseHas('archives', [
            'description' => 'Test Archive',
            'created_by' => $user->id
        ]);
    }
}
```

### **2. Database Factories**
```php
class ArchiveFactory extends Factory
{
    public function definition(): array
    {
        return [
            'description' => fake()->sentence(),
            'index_number' => fake()->unique()->numberBetween(1, 9999),
            'status' => fake()->randomElement(['Aktif', 'Inaktif', 'Dinilai Kembali']),
            'category_id' => Category::factory(),
            'classification_id' => Classification::factory(),
            'created_by' => User::factory(),
        ];
    }
}
```

---

## 🔄 **COMMON ISSUES & SOLUTIONS**

### **1. Route Parameter Errors**
```php
// ❌ Wrong
route('admin.storage-management.show', $rack)

// ✅ Correct
route('admin.storage-management.show', $rack->id)
```

### **2. JavaScript Array vs Collection**
```php
// ❌ JavaScript can't handle Laravel Collections
$racks = StorageRack::all();

// ✅ Convert to array for JavaScript
$racksArray = array_values($racks->toArray());
```

### **3. Form Validation Errors**
```php
// ❌ Missing input field
<div>{{ $file_number }}</div>

// ✅ Hidden input for form submission
<input type="hidden" name="file_number" value="{{ $file_number }}">
<div>{{ $file_number }}</div>
```

### **4. Database Connection Issues**
```bash
# Test PostgreSQL connection
psql -h localhost -U arsip_user -d arsip_production

# Check PostgreSQL status
sudo systemctl status postgresql

# Restart PostgreSQL
sudo systemctl restart postgresql
```

---

##  **DEVELOPMENT WORKFLOW**

### **1. Feature Development**
```bash
# 1. Create feature branch
git checkout -b feature/notification-system

# 2. Implement feature with tests
# ... coding ...

# 3. Test locally
php artisan test
php artisan serve

# 4. Commit changes
git add .
git commit -m "feat: implement notification system"

# 5. Push and create PR
git push origin feature/notification-system
```

### **2. Bug Fixes**
1. **Identify issue** in specific role/feature
2. **Check related files** (controller, model, view, route)
3. **Implement fix** with proper error handling
4. **Test across all roles**
5. **Update documentation** if needed

### **3. Security Considerations**
- Always validate user permissions
- Sanitize all inputs
- Use prepared statements (Eloquent ORM)
- Implement proper error handling
- Never expose sensitive data in logs

---

## 📋 **QUICK REFERENCE**

### **Key Files**
- `app/Models/Archive.php` - Core archive logic
- `app/Http/Controllers/` - Role-based controllers
- `routes/web.php` - Route definitions
- `resources/views/` - Blade templates
- `database/migrations/` - Database schema

### **Key Commands**
```bash
php artisan migrate          # Run migrations
php artisan db:seed         # Seed database
php artisan test            # Run tests
php artisan route:list      # List all routes
php artisan tinker          # Interactive shell
php artisan config:cache    # Cache configuration
php artisan route:cache     # Cache routes
php artisan view:cache      # Cache views
```

### **Key URLs**
- Admin: `/admin/*`
- Staff: `/staff/*`
- Intern: `/intern/*`
- API: `/api/v1/*`

### **Key Environment Variables**
```bash
APP_ENV=production
APP_DEBUG=false
DB_CONNECTION=pgsql
CACHE_DRIVER=redis
SESSION_DRIVER=redis
```

---

## 🎯 **FUTURE DEVELOPMENT**

### **Planned Features**
1. **Notification System** - Real-time notifications
2. **API Development** - RESTful API endpoints
3. **PWA Capabilities** - Progressive Web App features
4. **Advanced Reporting** - Enhanced analytics
5. **Mobile Optimization** - Responsive design improvements

### **Technical Debt**
1. **Code Optimization** - Performance improvements
2. **Test Coverage** - Increase test coverage
3. **Documentation** - API documentation
4. **Security Audit** - Regular security reviews
5. **Performance Monitoring** - Real-time monitoring

---

## 📞 **SUPPORT INFORMATION**

### **Contact Details**
- **System Admin**: [Contact Info]
- **Database Admin**: [Contact Info]
- **Emergency Contact**: [Contact Info]

### **Useful Commands**
```bash
# Check system status
sudo systemctl status nginx
sudo systemctl status postgresql
sudo systemctl status redis-server
sudo systemctl status php8.4-fpm

# View logs
sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/www/archivy/storage/logs/laravel.log

# Database backup
pg_dump -h localhost -U arsip_user arsip_production > backup.sql

# Application backup
tar -czf app_backup.tar.gz /var/www/archivy
```

---

**📝 Note**: This documentation should be updated regularly as the system evolves. All developers should follow these patterns to maintain consistency and security across the application.

**🔒 Security Reminder**: Never commit sensitive information like passwords or API keys to version control. Always use environment variables for configuration.

** Performance Tip**: Use Redis for caching, optimize database queries, and monitor system resources regularly.
