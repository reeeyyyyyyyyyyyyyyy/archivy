# Archive System - Post Testing Revision & Automation Rules
*File type: .mdc (Markdown for AI rules)*
*Last update: 2025-08-XX*
*Version: 2.1 - Post Testing Revision with Related Archives*

---

## 1. Overview & Scope

### 1.1 System Purpose
Sistem arsip digital yang mengotomatisasi workflow real-life archive management dengan fokus pada:
- **Efisiensi waktu**: Menghilangkan proses manual sorting tahun
- **User-friendly**: Input manual hanya untuk masalah (classification)
- **Smart automation**: Auto-detect tahun, auto-sort, auto-assign storage
- **Accurate labeling**: Generate label yang rapi dan terurut
- **Related archives**: Manajemen arsip yang sama dengan lampiran yang sama

### 1.2 Key Changes After Testing
1. **REMOVE**: Auto-generate nomor file feature
2. **FIX**: Archive edit functionality
3. **ENHANCE**: Smart year detection & sorting
4. **AUTOMATE**: Storage assignment based on year order
5. **IMPROVE**: Definitive number generation per masalah
6. **NEW**: Related archives management system

---

## 2. Business Rules & Workflow

### 2.1 Real-Life Workflow (Current Problem)
```
A. User mengambil tumpukan berkas arsip kacau (real life)
B. User memilah tahun dan masalah dari setiap tumpukan (real life)
C. User input arsip di aplikasi dimulai dari tahun terlama
D. Program otomatis generate nasib akhir/status
E. User set lokasi ke rak, baris, box
F. Program otomatis generate nomor definitif pada fitur generate label
```

### 2.2 New Automated Workflow
```
A. User input arsip (description, kurun_waktu_start, classification)
B. System auto-detect tahun dari kurun_waktu_start
C. System auto-sort berdasarkan tahun terlama
D. System auto-assign storage berdasarkan urutan tahun
E. System auto-generate definitive number per masalah
F. System auto-generate label yang rapi
```

### 2.3 Related Archives Workflow
```
A. User memilah arsip dari tumpukan kacau (memilah masalah)
B. User input arsip pertama dengan kategori/klasifikasi/lampiran
C. System detect arsip yang sama berdasarkan kombinasi kategori+klasifikasi+lampiran_surat
D. User dapat menambah arsip terkait dengan auto-filled data
E. System manage arsip terkait dengan urutan tahun terlama
F. Bulk storage assignment dengan filter kategori dan tahun
```

### 2.4 Definitive Number Rules
```
- Nomor definitive BERULANG KE 1 saat pindah masalah (classification)
- Contoh: Masalah A tahun 2016 = 1-100, Masalah A tahun 2017 = 1-50
- Jika ada arsip baru tahun 2016 masalah A, sesuaikan di rak lain
- Satu rak bisa berisi satu masalah + beberapa tahun
- Jika satu masalah tidak cukup satu rak, gunakan rak lain
```

### 2.5 Related Archives Rules
```
- Deteksi arsip sama: kombinasi kategori + klasifikasi + lampiran_surat
- Arsip parent: tahun terlama dari arsip yang sama
- Nomor definitif: terus berjalan meskipun pindah box
- Tahun berlanjut: nomor definitif berulang ke 1
- Status: bisa berbeda tergantung tahun dan retensi
- Bulk storage: filter kategori + tahun, urut tahun terlama
```

---

## 3. Technical Implementation

### 3.1 Remove Auto-Generate Features

#### ArchiveController.php Changes
```php
// REMOVE these methods completely:
// - generateAutoIndexNumber()
// - getNextFileNumber()

// MODIFY store() method:
public function store(StoreArchiveRequest $request)
{
    $validated = $request->validated();

    // Check for duplicate archives
    $duplicateArchive = Archive::where('category_id', $validated['category_id'])
        ->where('classification_id', $validated['classification_id'])
        ->where('lampiran_surat', $validated['lampiran_surat'])
        ->first();

    if ($duplicateArchive) {
        return redirect()->back()
            ->withInput()
            ->with('error', 'Arsip dengan kategori/klasifikasi/lampiran yang sama sudah ada.
                    Arsip: ' . $duplicateArchive->description . ' (Tahun: ' .
                    $duplicateArchive->kurun_waktu_start->format('Y') . ')');
    }

    // Use manual index_number directly (no auto-generation)
    $indexNumber = $validated['index_number'];

    // Create archive with manual input
    $archive = Archive::create([
        'index_number' => $indexNumber,
        'is_manual_input' => true,
        'is_parent' => true, // First archive is parent
        // ... other fields
    ]);

    // Auto-detect year and sort
    $this->autoProcessArchive($archive);
}
```

### 3.2 Related Archives Implementation

#### Database Schema Changes
```sql
-- Add related archives tracking
ALTER TABLE archives ADD COLUMN parent_archive_id BIGINT NULL;
ALTER TABLE archives ADD COLUMN is_parent BOOLEAN DEFAULT FALSE;

-- Add foreign key constraint
ALTER TABLE archives ADD CONSTRAINT fk_archives_parent
    FOREIGN KEY (parent_archive_id) REFERENCES archives(id) ON DELETE SET NULL;

-- Add indexes for performance
CREATE INDEX idx_archives_related ON archives(category_id, classification_id, lampiran_surat);
CREATE INDEX idx_archives_parent ON archives(parent_archive_id);
```

#### Archive Model Updates
```php
// app/Models/Archive.php
class Archive extends Model
{
    protected $fillable = [
        // ... existing fields
        'parent_archive_id',
        'is_parent'
    ];

    // Related archives relationships
    public function parentArchive()
    {
        return $this->belongsTo(Archive::class, 'parent_archive_id');
    }

    public function relatedArchives()
    {
        return $this->hasMany(Archive::class, 'parent_archive_id');
    }

    // Get all related archives (including parent)
    public function getAllRelatedArchives()
    {
        $parent = $this->is_parent ? $this : $this->parentArchive;
        if (!$parent) return collect([$this]);

        return Archive::where('parent_archive_id', $parent->id)
            ->orWhere('id', $parent->id)
            ->orderBy('kurun_waktu_start')
            ->get();
    }

    // Check if archive has same category/classification/attachment
    public function hasSameAttributes($otherArchive)
    {
        return $this->category_id === $otherArchive->category_id &&
               $this->classification_id === $otherArchive->classification_id &&
               $this->lampiran_surat === $otherArchive->lampiran_surat;
    }

    // Get parent archive (oldest year)
    public function getParentArchive()
    {
        if ($this->is_parent) return $this;
        if ($this->parentArchive) return $this->parentArchive;

        // Find parent by same attributes, oldest year
        return Archive::where('category_id', $this->category_id)
            ->where('classification_id', $this->classification_id)
            ->where('lampiran_surat', $this->lampiran_surat)
            ->orderBy('kurun_waktu_start')
            ->first();
    }
}
```

#### Related Archives Controller
```php
// app/Http/Controllers/RelatedArchivesController.php
class RelatedArchivesController extends Controller
{
    // Show related archives for specific archive
    public function index(Archive $archive)
    {
        $relatedArchives = $archive->getAllRelatedArchives();

        return view('admin.archives.related', compact('archive', 'relatedArchives'));
    }

    // Show global related archives by category
    public function byCategory(Request $request)
    {
        $categoryId = $request->category_id;
        $archives = Archive::where('category_id', $categoryId)
            ->where('is_parent', true)
            ->with(['relatedArchives'])
            ->orderBy('kurun_waktu_start')
            ->get();

        return view('admin.archives.related-category', compact('archives'));
    }

    // Create related archive with auto-filled data
    public function createRelated(Archive $parentArchive)
    {
        return view('admin.archives.create-related', compact('parentArchive'));
    }

    // Store related archive
    public function storeRelated(Request $request, Archive $parentArchive)
    {
        $validated = $request->validated();

        // Auto-fill category, classification, and attachment
        $archive = Archive::create([
            'category_id' => $parentArchive->category_id,
            'classification_id' => $parentArchive->classification_id,
            'lampiran_surat' => $parentArchive->lampiran_surat,
            'parent_archive_id' => $parentArchive->id,
            // ... other fields from request
        ]);

        return redirect()->route('admin.archives.show', $archive)
            ->with('success', 'Arsip terkait berhasil dibuat');
    }
}
```

### 3.3 UI/UX Implementation

#### Archive Index Table Updates
```html
<!-- Add "Tambah Berkas Arsip yang Sama" button -->
<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
    <a href="{{ route('admin.archives.create-related', $archive) }}"
       class="text-indigo-600 hover:text-indigo-900">
        <i class="fas fa-plus-circle"></i> Tambah Berkas Arsip yang Sama
    </a>
    <a href="{{ route('admin.archives.related', $archive) }}"
       class="text-blue-600 hover:text-blue-900 ml-2">
        <i class="fas fa-link"></i> Arsip Terkait
    </a>
</td>
```

#### Related Archives View
```html
<!-- resources/views/admin/archives/related.blade.php -->
<div class="bg-white shadow overflow-hidden sm:rounded-md">
    <div class="px-4 py-5 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
            Arsip Terkait: {{ $archive->description }}
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Kategori: {{ $archive->category->nama_kategori }} |
            Klasifikasi: {{ $archive->classification->nama_klasifikasi }} |
            Lampiran: {{ $archive->lampiran_surat }}
        </p>
    </div>

    <div class="border-t border-gray-200">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tahun
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Nomor Arsip
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Deskripsi
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Status
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Lokasi
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach($relatedArchives as $relatedArchive)
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {{ $relatedArchive->kurun_waktu_start->format('Y') }}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {{ $relatedArchive->index_number }}
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                        {{ $relatedArchive->description }}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                            {{ $relatedArchive->status === 'Aktif' ? 'bg-green-100 text-green-800' :
                               ($relatedArchive->status === 'Inaktif' ? 'bg-yellow-100 text-yellow-800' :
                               'bg-gray-100 text-gray-800') }}">
                            {{ $relatedArchive->status }}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        @if($relatedArchive->rack_number)
                            Rak {{ $relatedArchive->rack_number }},
                            Box {{ $relatedArchive->box_number }},
                            Baris {{ $relatedArchive->row_number }}
                        @else
                            <span class="text-gray-400">Belum ditentukan</span>
                        @endif
                    </td>
                </tr>
                @endforeach
            </tbody>
        </table>
    </div>
</div>
```

### 3.4 Bulk Storage Assignment

#### Bulk Storage Controller
```php
// app/Http/Controllers/BulkStorageController.php
class BulkStorageController extends Controller
{
    public function index(Request $request)
    {
        $categoryId = $request->category_id;
        $year = $request->year;

        $archives = Archive::where('category_id', $categoryId)
            ->whereYear('kurun_waktu_start', $year)
            ->whereNull('rack_number')
            ->orderBy('kurun_waktu_start')
            ->orderBy('lampiran_surat')
            ->get();

        $categories = Category::all();
        $years = Archive::selectRaw('YEAR(kurun_waktu_start) as year')
            ->distinct()
            ->orderBy('year')
            ->pluck('year');

        return view('admin.storage.bulk', compact('archives', 'categories', 'years'));
    }

    public function assignBulk(Request $request)
    {
        $archiveIds = $request->archive_ids;
        $rackNumber = $request->rack_number;
        $boxNumber = $request->box_number;
        $rowNumber = $request->row_number;

        // Assign storage to multiple archives
        foreach ($archiveIds as $index => $archiveId) {
            $archive = Archive::find($archiveId);
            $fileNumber = $index + 1; // Sequential file numbers

            $archive->update([
                'rack_number' => $rackNumber,
                'box_number' => $boxNumber,
                'row_number' => $rowNumber,
                'file_number' => $fileNumber
            ]);
        }

        return redirect()->back()->with('success', 'Lokasi berhasil di-assign untuk ' . count($archiveIds) . ' arsip');
    }
}
```

---

## 4. Database Schema Updates

### 4.1 Archive Table Changes
```sql
-- Add related archives fields
ALTER TABLE archives ADD COLUMN parent_archive_id BIGINT NULL;
ALTER TABLE archives ADD COLUMN is_parent BOOLEAN DEFAULT FALSE;

-- Add foreign key constraint
ALTER TABLE archives ADD CONSTRAINT fk_archives_parent
    FOREIGN KEY (parent_archive_id) REFERENCES archives(id) ON DELETE SET NULL;

-- Add indexes for performance
CREATE INDEX idx_archives_related ON archives(category_id, classification_id, lampiran_surat);
CREATE INDEX idx_archives_parent ON archives(parent_archive_id);
```

---

## 5. Routes Configuration

### 5.1 Related Archives Routes
```php
// Admin routes
Route::get('archives/{archive}/related', [RelatedArchivesController::class, 'index'])
    ->name('archives.related');
Route::get('archives/related/category', [RelatedArchivesController::class, 'byCategory'])
    ->name('archives.related-category');
Route::get('archives/{archive}/create-related', [RelatedArchivesController::class, 'createRelated'])
    ->name('archives.create-related');
Route::post('archives/{archive}/store-related', [RelatedArchivesController::class, 'storeRelated'])
    ->name('archives.store-related');

// Bulk storage routes
Route::get('storage/bulk', [BulkStorageController::class, 'index'])
    ->name('storage.bulk');
Route::post('storage/bulk-assign', [BulkStorageController::class, 'assignBulk'])
    ->name('storage.bulk-assign');
```

---

## 6. Testing Scenarios

### 6.1 Related Archives Test
```php
public function test_related_archives_creation()
{
    // Create parent archive
    $parentArchive = Archive::factory()->create([
        'category_id' => 1,
        'classification_id' => 1,
        'lampiran_surat' => 'SK-001',
        'is_parent' => true
    ]);

    // Create related archive
    $relatedArchive = Archive::factory()->create([
        'category_id' => 1,
        'classification_id' => 1,
        'lampiran_surat' => 'SK-001',
        'parent_archive_id' => $parentArchive->id
    ]);

    $this->assertTrue($parentArchive->relatedArchives->contains($relatedArchive));
    $this->assertEquals($parentArchive->id, $relatedArchive->parentArchive->id);
}
```

### 6.2 Duplicate Detection Test
```php
public function test_duplicate_archive_detection()
{
    // Create first archive
    Archive::factory()->create([
        'category_id' => 1,
        'classification_id' => 1,
        'lampiran_surat' => 'SK-001'
    ]);

    // Try to create duplicate
    $response = $this->post('/admin/archives', [
        'category_id' => 1,
        'classification_id' => 1,
        'lampiran_surat' => 'SK-001',
        // ... other fields
    ]);

    $response->assertSessionHasErrors();
}
```

---

## 7. Deployment Checklist

### 7.1 Pre-Deployment
- [ ] Backup database
- [ ] Test migration on staging
- [ ] Verify related archives functionality
- [ ] Test duplicate detection

### 7.2 Deployment Steps
```bash
# 1. Run migration
php artisan migrate

# 2. Update existing data
php artisan db:seed --class=UpdateArchiveRelationsSeeder

# 3. Clear cache
php artisan config:clear
php artisan route:clear
php artisan view:clear

# 4. Test functionality
php artisan test
```

### 7.3 Post-Deployment
- [ ] Verify related archives creation
- [ ] Test duplicate detection
- [ ] Test bulk storage assignment
- [ ] User acceptance testing

---

## 8. Future Enhancements

### 8.1 Advanced Features
- Auto-suggest related archives based on content similarity
- Bulk import with duplicate detection
- Advanced filtering for related archives

### 8.2 Performance Optimizations
- Caching for related archives queries
- Database indexing optimization
- Lazy loading for large related archive sets

---

## 9. Conclusion

Revisi ini akan:
1. ✅ Menghapus auto-generate nomor file
2. ✅ Memperbaiki fungsi edit arsip
3. ✅ Implementasi workflow otomatis yang user-friendly
4. ✅ Auto-detect tahun dan sorting
5. ✅ Smart storage assignment
6. ✅ Label generation yang akurat
7. ✅ **NEW**: Related archives management system
8. ✅ **NEW**: Duplicate detection and prevention
9. ✅ **NEW**: Bulk storage assignment with filtering

Sistem akan lebih efisien dan sesuai dengan kebutuhan real-life archive management dengan fitur arsip terkait yang powerful.
```

---

**✅ DOKUMENTASI SUDAH DIUPDATE!**

Sekarang dokumentasi sudah lengkap dengan fitur "Related Archives" yang baru. Mari saya mulai implementasi secara bertahap:

** MULAI IMPLEMENTASI FITUR "ARSIP YANG SAMA"**

Apakah Anda ingin saya mulai implementasi sekarang?
