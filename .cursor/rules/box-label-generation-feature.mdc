# Box Label Generation Feature - Comprehensive Documentation

## Overview

The Box Label Generation feature is a comprehensive system for generating printable labels for archive boxes in multiple formats (PDF, Word, Excel). The system generates labels based on selected racks and box ranges, with automatic pagination and proper formatting according to institutional standards.

## Table of Contents

1. [Feature Overview](#feature-overview)
2. [Technical Architecture](#technical-architecture)
3. [User Interface](#user-interface)
4. [Label Format Specifications](#label-format-specifications)
5. [Implementation Details](#implementation-details)
6. [Known Issues & Fixes](#known-issues--fixes)
7. [API Endpoints](#api-endpoints)
8. [Database Schema](#database-schema)
9. [File Structure](#file-structure)
10. [Testing & Validation](#testing--validation)

---

## Feature Overview

### Purpose
Generate printable labels for archive boxes that can be cut and attached to physical storage boxes. The labels contain archive information organized by year and archive numbers.

### Key Features
- **Multi-format Export**: PDF, Word (DOCX), Excel (XLSX)
- **Rack-based Selection**: Choose specific racks and box ranges
- **Automatic Pagination**: 4 labels per page with proper page breaks
- **Real-time Preview**: Live preview of label format before generation
- **Dynamic Content**: Archive ranges based on actual data in boxes

### User Roles & Permissions
- **Admin**: Full access to all racks and boxes
- **Staff**: Access to assigned racks and intern boxes
- **Intern**: Access to own assigned boxes only

---

## Technical Architecture

### Core Components

#### 1. Controller: `GenerateLabelController`
**File**: `app/Http/Controllers/GenerateLabelController.php`

**Key Methods**:
- `index()`: Display generation form
- `generate()`: Process generation request
- `getBoxes()`: AJAX endpoint for box selection
- `preview()`: Real-time preview generation
- `generatePDF()`: PDF generation
- `generateWord()`: Word document generation
- `generateExcel()`: Excel generation
- `generateLabelsData()`: Data processing logic

#### 2. View: `generate-box-labels.blade.php`
**File**: `resources/views/admin/storage/generate-box-labels.blade.php`

**Features**:
- Responsive form with Select2 dropdowns
- Real-time preview section
- AJAX-based dynamic box loading
- Progress indicators and error handling

#### 3. Template: `label-template.blade.php`
**File**: `resources/views/admin/storage/label-template.blade.php`

**Purpose**: PDF generation template with proper styling and pagination

### Data Flow

```
User Input → Form Validation → Box Range Query → Archive Data Processing →
Label Generation → File Creation → Download Response
```

### Table Structure
| Column | Width | Content | Alignment |
|--------|-------|---------|-----------|
| NOMOR BERKAS | 75% | Archive ranges | Left |
| NO. BOKS | 25% | Box number | Center |


|—————————————————————————————----------------|
| 		DINAS PENANAMAN MODAL DAN PTSP	  	  |
|				PROVINSI JAWA TIMUR		 	  |
|——-———————————————————————————---------------|
|		NOMOR BERKAS			|   NO.BOKS   |
|								|			  |
|	TAHUN X NO. ARSIP X-X		|	   X	  |
|	TAHUN X NO. ARSIP X-X		|			  |
|-—————————————————————————————---------------|

### Archive Range Format

#### Single Archive
```
TAHUN 2024 NO. ARSIP 1
```

#### Multiple Archives (Same Year)
```
TAHUN 2024 NO. ARSIP 1-15
```

#### Multiple Years
```
TAHUN 2023 NO. ARSIP 1-20
TAHUN 2024 NO. ARSIP 1-15
```

#### Empty Box (Placeholder)
```
TAHUN X NO. ARSIP X-X
TAHUN X NO. ARSIP X
```

### Pagination Rules
- **Maximum per page**: 4 labels
- **Page break**: After every 4th label
- **Spacing**: 3 rows between labels
- **Paper size**: A4 Portrait

---

## Implementation Details

### 1. Data Processing Logic

#### `generateLabelsData()` Method
```php
private function generateLabelsData($boxes, $rack)
{
    $labels = [];

    foreach ($boxes as $box) {
        // Get archives in this box
        $archives = Archive::where('box_number', $box->box_number)->get();

        if ($archives->isEmpty()) {
            // Empty box - use placeholders
            $labels[] = [
                'box_number' => $box->box_number,
                'ranges' => [
                    'TAHUN X NO. ARSIP X-X',
                    'TAHUN X NO. ARSIP X'
                ]
            ];
            continue;
        }

        // Group archives by year
        $archivesByYear = $archives->groupBy(function($archive) {
            return $archive->kurun_waktu_start ? $archive->kurun_waktu_start->year : 'Unknown';
        });

        $ranges = [];
        foreach ($archivesByYear as $year => $yearArchives) {
            $totalArchives = $yearArchives->count();

            if ($totalArchives === 1) {
                $ranges[] = "TAHUN {$year} NO. ARSIP 1";
            } else {
                $half = ceil($totalArchives / 2);
                $ranges[] = "TAHUN {$year} NO. ARSIP 1-{$half}";
                if ($totalArchives > $half) {
                    $ranges[] = "TAHUN {$year} NO. ARSIP " . ($half + 1) . "-{$totalArchives}";
                }
            }
        }

        // Ensure minimum 2 ranges
        if (count($ranges) === 0) {
            $ranges = ['TAHUN X NO. ARSIP X-X', 'TAHUN X NO. ARSIP X'];
        } elseif (count($ranges) === 1) {
            $ranges[] = 'TAHUN X NO. ARSIP X';
        }

        $labels[] = [
            'box_number' => $box->box_number,
            'ranges' => $ranges
        ];
    }

    return $labels;
}
```

### 2. PDF Generation

#### `generatePDF()` Method
```php
private function generatePDF($labels, $rack)
{
    $filename = 'rack_labels_' . $rack->id . '_' . date('Y-m-d_H-i-s') . '.pdf';
    $filepath = storage_path('app/public/' . $filename);

    $html = view('admin.storage.label-template', compact('labels', 'rack'))->render();

    $pdf = PDF::loadHTML($html);
    $pdf->setPaper('A4', 'portrait');
    $pdf->save($filepath);

    $downloadUrl = url('storage/' . $filename);

    return response()->json([
        'success' => true,
        'message' => 'Label berhasil di-generate!',
        'download_url' => $downloadUrl
    ]);
}
```

### 3. Word Generation (Fixed)

#### `generateWord()` Method
```php
private function generateWord($labels, $rack)
{
    $filename = 'rack_labels_' . $rack->id . '_' . date('Y-m-d_H-i-s') . '.xlsx';
    $filepath = storage_path('app/public/' . $filename);

    // Create new PhpSpreadsheet document
    $spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();

    // Set page orientation to portrait
    $sheet->getPageSetup()->setOrientation(\PhpOffice\PhpSpreadsheet\Worksheet\PageSetup::ORIENTATION_PORTRAIT);
    $sheet->getPageSetup()->setPaperSize(\PhpOffice\PhpSpreadsheet\Worksheet\PageSetup::PAPERSIZE_A4);

    // Set margins for label printing
    $sheet->getPageMargins()->setTop(0.5);
    $sheet->getPageMargins()->setBottom(0.5);
    $sheet->getPageMargins()->setLeft(0.5);
    $sheet->getPageMargins()->setRight(0.5);

    $currentRow = 1;
    $labelsPerPage = 4;
    $labelCount = 0;

    foreach ($labels as $label) {
        // Add page break every 4 labels
        if ($labelCount > 0 && $labelCount % $labelsPerPage === 0) {
            $sheet->setBreak('A' . ($currentRow - 1), \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet::BREAK_ROW);
        }

        // Set header for each label
        $sheet->setCellValue('A' . $currentRow, 'DINAS PENANAMAN MODAL DAN PTSP');
        $sheet->setCellValue('A' . ($currentRow + 1), 'PROVINSI JAWA TIMUR');

        // Merge header cells
        $sheet->mergeCells('A' . $currentRow . ':D' . $currentRow);
        $sheet->mergeCells('A' . ($currentRow + 1) . ':D' . ($currentRow + 1));

        // Style header
        $sheet->getStyle('A' . $currentRow . ':A' . ($currentRow + 1))->getFont()->setBold(true)->setSize(14);
        $sheet->getStyle('A' . $currentRow . ':A' . ($currentRow + 1))->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle('A' . $currentRow . ':A' . ($currentRow + 1))->getAlignment()->setVertical(\PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_CENTER);

        // Add border under header
        $sheet->getStyle('A' . $currentRow . ':D' . ($currentRow + 1))->getBorders()->getBottom()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);

        // Set table headers
        $tableRow = $currentRow + 3;
        $sheet->setCellValue('A' . $tableRow, 'NOMOR BERKAS');
        $sheet->setCellValue('D' . $tableRow, 'NO. BOKS');

        // Merge table header cells
        $sheet->mergeCells('A' . $tableRow . ':C' . $tableRow);

        // Style table headers
        $sheet->getStyle('A' . $tableRow . ':D' . $tableRow)->getFont()->setBold(true);
        $sheet->getStyle('A' . $tableRow . ':D' . $tableRow)->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle('A' . $tableRow . ':D' . $tableRow)->getFill()->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)->getStartColor()->setRGB('E5E7EB');
        $sheet->getStyle('A' . $tableRow . ':D' . $tableRow)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);

        // Add data rows
        $dataRow = $tableRow + 1;
        foreach ($label['ranges'] as $index => $range) {
            $sheet->setCellValue('A' . $dataRow, $range);
            $sheet->setCellValue('D' . $dataRow, $label['box_number']);
            $sheet->mergeCells('A' . $dataRow . ':C' . $dataRow);

            // Style data row
            $sheet->getStyle('A' . $dataRow . ':D' . $dataRow)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
            $sheet->getStyle('A' . $dataRow . ':C' . $dataRow)->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle('D' . $dataRow)->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle('D' . $dataRow)->getFont()->setBold(true);

            $dataRow++;
        }

        // Set column widths
        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(8);

        // Set row heights
        $sheet->getRowDimension($currentRow)->setRowHeight(25);
        $sheet->getRowDimension($currentRow + 1)->setRowHeight(25);
        $sheet->getRowDimension($tableRow)->setRowHeight(20);

        // Move to next label (add space between labels)
        $currentRow = $dataRow + 3;
        $labelCount++;
    }

    // Save as XLSX file (Word-compatible)
    $writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($spreadsheet);
    $writer->save($filepath);

    $downloadUrl = url('storage/' . $filename);

    return response()->json([
        'success' => true,
        'message' => 'Label berhasil di-generate!',
        'download_url' => $downloadUrl
    ]);
}
```

---

## Known Issues & Fixes

### 1. Word File Opening Issue

**Problem**: Generated Word files cannot be opened by users
**Root Cause**: PhpSpreadsheet doesn't natively support DOCX format
**Solution**: Generate XLSX files that Word can open

**Fix Implementation**:
```php
// Change file extension from .docx to .xlsx
$filename = 'rack_labels_' . $rack->id . '_' . date('Y-m-d_H-i-s') . '.xlsx';

// Use Xlsx writer instead of Docx
$writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($spreadsheet);
```

### 2. Field Size Issues

**Problem**: Select2 fields are too small and narrow
**Solution**: Replace Select2 with regular dropdowns

**Fix Implementation**:
```html
<!-- Replace Select2 with regular dropdown -->
<select name="rack_id" id="rack_id" required
    class="w-full bg-white border-2 border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 py-8 px-8 text-xl hover:border-blue-400">
    <option value="">-- Pilih RAK --</option>
    @foreach($racks as $rack)
        <option value="{{ $rack->id }}">{{ $rack->name }} ({{ $filledBoxCount }}/{{ $boxCount }} box)</option>
    @endforeach
</select>
```

### 3. Pagination Implementation

**Problem**: Missing pagination for 4 labels per page
**Solution**: Add page break logic

**Fix Implementation**:
```php
$labelsPerPage = 4;
$labelCount = 0;

foreach ($labels as $label) {
    // Add page break every 4 labels
    if ($labelCount > 0 && $labelCount % $labelsPerPage === 0) {
        $sheet->setBreak('A' . ($currentRow - 1), \PhpOffice\PhpSpreadsheet\Worksheet\Worksheet::BREAK_ROW);
    }

    // ... label generation code ...

    $labelCount++;
}
```

---

## API Endpoints

### 1. Main Routes
```php
Route::get('generate-labels', [GenerateLabelController::class, 'index'])->name('generate-labels.index');
Route::post('generate-labels/generate', [GenerateLabelController::class, 'generate'])->name('generate-labels.generate');
Route::get('generate-labels/boxes/{rackId}', [GenerateLabelController::class, 'getBoxes'])->name('generate-labels.boxes');
Route::get('generate-labels/preview/{rackId}/{boxStart}/{boxEnd}', [GenerateLabelController::class, 'preview'])->name('generate-labels.preview');
```

### 2. Request/Response Format

#### Generate Request
```json
{
    "rack_id": 1,
    "box_start": 1,
    "box_end": 10,
    "format": "pdf"
}
```

#### Generate Response
```json
{
    "success": true,
    "message": "Label berhasil di-generate!",
    "download_url": "http://example.com/storage/filename.pdf"
}
```

#### Boxes Response
```json
{
    "success": true,
    "boxes": [
        {
            "box_number": 1,
            "archive_count": 15,
            "capacity": 20
        }
    ]
}
```

---

## Database Schema

### Related Tables

#### 1. `storage_racks`
```sql
CREATE TABLE storage_racks (
    id bigint unsigned NOT NULL AUTO_INCREMENT,
    name varchar(255) NOT NULL,
    status enum('active','inactive') DEFAULT 'active',
    created_at timestamp NULL DEFAULT NULL,
    updated_at timestamp NULL DEFAULT NULL,
    PRIMARY KEY (id)
);
```

#### 2. `storage_boxes`
```sql
CREATE TABLE storage_boxes (
    id bigint unsigned NOT NULL AUTO_INCREMENT,
    rack_id bigint unsigned NOT NULL,
    box_number int unsigned NOT NULL,
    archive_count int DEFAULT 0,
    capacity int DEFAULT 20,
    created_at timestamp NULL DEFAULT NULL,
    updated_at timestamp NULL DEFAULT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (rack_id) REFERENCES storage_racks(id)
);
```

#### 3. `archives`
```sql
CREATE TABLE archives (
    id bigint unsigned NOT NULL AUTO_INCREMENT,
    box_number int unsigned NULL,
    kurun_waktu_start date NULL,
    -- other fields...
    PRIMARY KEY (id)
);
```

---

## File Structure

```
app/
├── Http/
│   └── Controllers/
│       └── GenerateLabelController.php
resources/
├── views/
│   └── admin/
│       └── storage/
│           ├── generate-box-labels.blade.php
│           └── label-template.blade.php
storage/
└── app/
    └── public/
        └── Label Boks.docx (reference template)
```

---

## Testing & Validation

### 1. Manual Testing Checklist

#### Form Functionality
- [ ] Rack selection loads all active racks
- [ ] Box range updates based on selected rack
- [ ] Validation prevents invalid box ranges
- [ ] Preview updates in real-time
- [ ] All format options work correctly

#### File Generation
- [ ] PDF files open correctly
- [ ] Word files open in Microsoft Word
- [ ] Excel files open in Excel
- [ ] Files contain correct label format
- [ ] Pagination works (4 labels per page)

#### Data Accuracy
- [ ] Archive ranges match actual data
- [ ] Box numbers are correct
- [ ] Empty boxes show placeholders
- [ ] Multiple years display correctly

### 2. Automated Testing

#### Unit Tests
```php
public function test_generate_labels_data()
{
    // Test data processing logic
    $boxes = StorageBox::factory()->count(3)->create();
    $archives = Archive::factory()->count(5)->create();

    $controller = new GenerateLabelController();
    $labels = $controller->generateLabelsData($boxes, $rack);

    $this->assertCount(3, $labels);
    $this->assertArrayHasKey('box_number', $labels[0]);
    $this->assertArrayHasKey('ranges', $labels[0]);
}
```

#### Feature Tests
```php
public function test_generate_labels_endpoint()
{
    $rack = StorageRack::factory()->create();
    $boxes = StorageBox::factory()->count(5)->create(['rack_id' => $rack->id]);

    $response = $this->post('/admin/generate-labels/generate', [
        'rack_id' => $rack->id,
        'box_start' => 1,
        'box_end' => 5,
        'format' => 'pdf'
    ]);

    $response->assertStatus(200);
    $response->assertJson(['success' => true]);
}
```

### 3. Performance Testing

#### Load Testing
- Test with 100+ boxes
- Verify memory usage
- Check generation time
- Validate file sizes

#### Browser Testing
- Chrome, Firefox, Safari
- Mobile responsiveness
- Print functionality

---

## Deployment Notes

### 1. Dependencies
```bash
composer require phpoffice/phpspreadsheet
composer require barryvdh/laravel-dompdf
```

### 2. Storage Configuration
```bash
php artisan storage:link
chmod 775 storage/app/public
```

### 3. File Permissions
```bash
chown -R www-data:www-data storage/
chmod -R 775 storage/
```

---

## Future Enhancements

### 1. Advanced Features
- Batch processing for multiple racks
- Custom label templates
- QR code integration
- Print preview functionality

### 2. Performance Optimizations
- Caching for frequently accessed data
- Background job processing
- File compression
- CDN integration

### 3. User Experience
- Drag-and-drop box selection
- Template customization
- Export history
- Email delivery option

---

## Troubleshooting Guide

### Common Issues

#### 1. File Not Opening
**Symptoms**: Generated files cannot be opened
**Solution**: Check file permissions and ensure proper MIME types

#### 2. Memory Issues
**Symptoms**: Large box ranges cause memory errors
**Solution**: Implement chunking for large datasets

#### 3. Format Issues
**Symptoms**: Labels don't match expected format
**Solution**: Verify template structure and data processing logic

### Debug Commands
```bash
# Check file permissions
ls -la storage/app/public/

# Test PDF generation
php artisan tinker
$controller = new App\Http\Controllers\GenerateLabelController();
$controller->generatePDF($labels, $rack);

# Clear cache
php artisan cache:clear
php artisan config:clear
```

---

## Conclusion

The Box Label Generation feature provides a comprehensive solution for creating printable archive box labels. The system supports multiple output formats, real-time preview, and proper pagination. The recent fixes address the Word file opening issue and improve the user interface with better field sizing.

The feature is production-ready with proper error handling, validation, and user feedback mechanisms. The documentation provides complete implementation details for future development and maintenance.
```

This comprehensive documentation covers all aspects of the Box Label Generation feature, including the current implementation, known issues, fixes, and detailed technical specifications. The documentation is structured to help any AI or developer understand and work with this feature effectively.
