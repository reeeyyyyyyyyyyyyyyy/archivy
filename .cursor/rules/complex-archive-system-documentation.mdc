# 🗂️ COMPLEX ARCHIVE SYSTEM DOCUMENTATION
## Advanced Archive Management System with Category-Based Organization

*File type: .mdc (Markdown for AI rules)*
*Last update: 2025-08-12*
*Version: 3.0 - Complex Category-Based System*
*Language: English*

---

## 📖 **TABLE OF CONTENTS**

1. [System Overview](#1-system-overview)
2. [Business Rules & Logic](#2-business-rules--logic)
3. [Database Architecture](#3-database-architecture)
4. [Implementation Phases](#4-implementation-phases)
5. [Technical Specifications](#5-technical-specifications)
6. [User Interface Design](#6-user-interface-design)
7. [Development Steps](#7-development-steps)
8. [Testing Scenarios](#8-testing-scenarios)
9. [Deployment Guide](#9-deployment-guide)
10. [Maintenance & Support](#10-maintenance--support)

---

## 1. SYSTEM OVERVIEW

### 1.1 Purpose & Scope
The Complex Archive System is designed to manage archives based on **category/substance grouping** with intelligent file numbering, storage allocation, and Excel export capabilities. The system handles real-world archive management scenarios where archives of the same category need to be grouped together regardless of classification or attachment differences.

### 1.2 Core Concepts

#### **Parent Archive (Induk)**
- **Definition**: Archives with the same **category/substance** are considered related
- **Criteria**: Same category = same parent group
- **Example**: "Tanaman" category archives are all related, regardless of classification

#### **File Number Logic**
- **Rule**: File numbers restart from 1 for each year within the same box
- **Category Separation**: Different categories in the same box restart file numbering
- **Continuation**: Same category across different years continues numbering

#### **Storage Allocation**
- **Priority**: Oldest year gets priority for box placement
- **Capacity**: Maximum 50 archives per box (configurable)
- **Next Box**: Automatic progression to next box when current box is full

### 1.3 Key Features
- ✅ Category-based archive grouping
- ✅ Intelligent file numbering per year
- ✅ Automatic storage allocation
- ✅ Excel export per category and year
- ✅ Parent archive management
- ✅ Bulk operations support

---

## 2. BUSINESS RULES & LOGIC

### 2.1 Archive Grouping Rules

#### **Same Category = Same Parent**
```php
// Example Scenario:
// Masalah A: Category "Tanaman", Classification "Pertanian", Year 2019-2025
// Masalah B: Category "Hewan", Classification "Peternakan", Year 2019-2025
// Masalah C: Category "Tanaman", Classification "Hortikultura", Year 2019-2025
// Masalah D: Category "Tanaman", Classification "Pertanian", Year 2016-2018

// Result:
// - Masalah A, C, D = Same Parent (Category "Tanaman")
// - Masalah B = Different Parent (Category "Hewan")
```

#### **File Number Logic**
```php
// Rule: File numbers restart per year within same category
// Box 1: Category "Tanaman"
// - Year 2016: File 1-30
// - Year 2017: File 1-25
// - Year 2018: File 1-20
// Total: 75 archives in Box 1

// Box 2: Category "Tanaman" (continued)
// - Year 2019: File 1-50 (Box 2 full)
// - Year 2020: File 1-30 (Box 3)
```

### 2.2 Storage Allocation Rules

#### **Priority Order**
1. **Oldest Year First**: Archives with earliest years get priority
2. **Category Grouping**: Same category archives stay together
3. **Box Capacity**: Maximum 50 archives per box
4. **Next Box**: Automatic progression when box is full

#### **Example Allocation**
```php
// Scenario: Category "Tanaman" has archives from 2016-2025
// Total: 300 archives

// Allocation:
// Box 1: Year 2016 (50 archives) - File 1-50
// Box 2: Year 2016 (remaining 20) + Year 2017 (30) - File 1-50
// Box 3: Year 2017 (remaining 20) + Year 2018 (30) - File 1-50
// Box 4: Year 2018 (remaining 20) + Year 2019 (30) - File 1-50
// ... continues until all archives are allocated
```

### 2.3 Excel Export Structure

#### **Sheet Organization**
```php
// Excel Structure:
// Sheet 1: Category "Tanaman" - Year 2016
// Sheet 2: Category "Tanaman" - Year 2017
// Sheet 3: Category "Tanaman" - Year 2018
// Sheet 4: Category "Hewan" - Year 2019
// Sheet 5: Category "Hewan" - Year 2020
// ... etc
```

---

## 3. DATABASE ARCHITECTURE

### 3.1 Archive Table Modifications

#### **New Fields Required**
```sql
-- Add parent archive tracking
ALTER TABLE archives ADD COLUMN parent_archive_id BIGINT NULL;
ALTER TABLE archives ADD COLUMN is_parent BOOLEAN DEFAULT FALSE;
ALTER TABLE archives ADD COLUMN category_group_id VARCHAR(255) NULL;

-- Add indexes for performance
CREATE INDEX idx_archives_category_group ON archives(category_id, category_group_id);
CREATE INDEX idx_archives_parent ON archives(parent_archive_id);
CREATE INDEX idx_archives_year_category ON archives(category_id, kurun_waktu_start);
```

#### **Category Group Table**
```sql
-- New table for category grouping
CREATE TABLE category_groups (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    category_id BIGINT NOT NULL,
    group_name VARCHAR(255) NOT NULL,
    oldest_year INT NOT NULL,
    total_archives INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (category_id) REFERENCES categories(id),
    INDEX idx_category_groups_category (category_id),
    INDEX idx_category_groups_year (oldest_year)
);
```

### 3.2 Storage Management Enhancements

#### **Box Capacity Tracking**
```sql
-- Add capacity tracking to storage_boxes
ALTER TABLE storage_boxes ADD COLUMN current_capacity INT DEFAULT 0;
ALTER TABLE storage_boxes ADD COLUMN max_capacity INT DEFAULT 50;
ALTER TABLE storage_boxes ADD COLUMN category_group_id VARCHAR(255) NULL;

-- Add indexes
CREATE INDEX idx_storage_boxes_category ON storage_boxes(category_group_id);
CREATE INDEX idx_storage_boxes_capacity ON storage_boxes(current_capacity, max_capacity);
```

---

## 4. IMPLEMENTATION PHASES

### 4.1 Phase 1: Core Infrastructure ✅
- [x] Database schema modifications
- [x] Basic category grouping logic
- [x] File number generation per year
- [x] Storage allocation algorithm

### 4.2 Phase 2: Parent Archive Management 🔄
- [ ] Parent archive identification
- [ ] Related archives linking
- [ ] Bulk operations interface
- [ ] Category group management

### 4.3 Phase 3: Advanced Features ��
- [ ] Excel export per category/year
- [ ] Smart storage allocation
- [ ] Next box automation
- [ ] Capacity management

### 4.4 Phase 4: User Interface 🎨
- [ ] Parent archive dashboard
- [ ] Category-based views
- [ ] Bulk operations UI
- [ ] Export management interface

---

## 5. TECHNICAL SPECIFICATIONS

### 5.1 Archive Model Enhancements

#### **Archive.php**
```php
class Archive extends Model
{
    protected $fillable = [
        // ... existing fields
        'parent_archive_id',
        'is_parent',
        'category_group_id'
    ];

    // Relationships
    public function parentArchive()
    {
        return $this->belongsTo(Archive::class, 'parent_archive_id');
    }

    public function relatedArchives()
    {
        return $this->hasMany(Archive::class, 'parent_archive_id');
    }

    public function categoryGroup()
    {
        return $this->belongsTo(CategoryGroup::class, 'category_group_id');
    }

    // Business Logic Methods
    public function getParentArchive()
    {
        if ($this->is_parent) return $this;
        return $this->parentArchive;
    }

    public function getAllRelatedArchives()
    {
        $parent = $this->getParentArchive();
        if (!$parent) return collect([$this]);

        return Archive::where('parent_archive_id', $parent->id)
            ->orWhere('id', $parent->id)
            ->orderBy('kurun_waktu_start')
            ->orderBy('file_number')
            ->get();
    }

    public function generateFileNumber()
    {
        $parent = $this->getParentArchive();
        $year = $this->kurun_waktu_start->year;

        // Get next file number for this category and year
        $lastFileNumber = Archive::where('parent_archive_id', $parent->id)
            ->whereYear('kurun_waktu_start', $year)
            ->max('file_number') ?? 0;

        return $lastFileNumber + 1;
    }
}
```

### 5.2 Category Group Model

#### **CategoryGroup.php**
```php
class CategoryGroup extends Model
{
    protected $fillable = [
        'category_id',
        'group_name',
        'oldest_year',
        'total_archives'
    ];

    // Relationships
    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function archives()
    {
        return $this->hasMany(Archive::class, 'category_group_id');
    }

    // Business Logic
    public function getArchivesByYear()
    {
        return $this->archives()
            ->orderBy('kurun_waktu_start')
            ->get()
            ->groupBy(function($archive) {
                return $archive->kurun_waktu_start->year;
            });
    }

    public function getNextAvailableBox()
    {
        // Find next available box for this category group
        return StorageBox::where('category_group_id', $this->id)
            ->where('current_capacity', '<', 'max_capacity')
            ->orderBy('box_number')
            ->first();
    }
}
```

### 5.3 Storage Allocation Service

#### **StorageAllocationService.php**
```php
class StorageAllocationService
{
    public function allocateStorage(Archive $archive)
    {
        $categoryGroup = $this->getOrCreateCategoryGroup($archive);
        $archive->update(['category_group_id' => $categoryGroup->id]);

        // Find appropriate box
        $box = $this->findAvailableBox($categoryGroup);

        if (!$box) {
            $box = $this->createNewBox($categoryGroup);
        }

        // Assign storage location
        $fileNumber = $this->generateFileNumber($archive, $box);

        $archive->update([
            'rack_number' => $box->rack->rack_number,
            'row_number' => $box->row->row_number,
            'box_number' => $box->box_number,
            'file_number' => $fileNumber
        ]);

        // Update box capacity
        $box->increment('current_capacity');
    }

    private function getOrCreateCategoryGroup(Archive $archive)
    {
        return CategoryGroup::firstOrCreate([
            'category_id' => $archive->category_id
        ], [
            'group_name' => $archive->category->nama_kategori,
            'oldest_year' => $archive->kurun_waktu_start->year
        ]);
    }

    private function findAvailableBox(CategoryGroup $categoryGroup)
    {
        return StorageBox::where('category_group_id', $categoryGroup->id)
            ->where('current_capacity', '<', 'max_capacity')
            ->orderBy('box_number')
            ->first();
    }

    private function generateFileNumber(Archive $archive, StorageBox $box)
    {
        $year = $archive->kurun_waktu_start->year;

        return Archive::where('box_number', $box->box_number)
            ->whereYear('kurun_waktu_start', $year)
            ->where('category_id', $archive->category_id)
            ->max('file_number') + 1;
    }
}
```

---

## 6. USER INTERFACE DESIGN

### 6.1 Parent Archive Dashboard

#### **Parent Archive Index**
```html
<!-- resources/views/admin/parent-archives/index.blade.php -->
<div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
            Parent Archives by Category
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Manage archives grouped by category/substance
        </p>
    </div>

    <div class="border-t border-gray-200">
        @foreach($categoryGroups as $categoryGroup)
        <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500">
                {{ $categoryGroup->group_name }}
            </dt>
            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                <div class="flex justify-between items-center">
                    <span>{{ $categoryGroup->total_archives }} archives</span>
                    <span>Years: {{ $categoryGroup->oldest_year }} - {{ $categoryGroup->newest_year }}</span>
                    <div class="flex space-x-2">
                        <a href="{{ route('admin.parent-archives.show', $categoryGroup) }}"
                           class="text-indigo-600 hover:text-indigo-900">View Details</a>
                        <a href="{{ route('admin.parent-archives.export', $categoryGroup) }}"
                           class="text-green-600 hover:text-green-900">Export Excel</a>
                    </div>
                </div>
            </dd>
        </div>
        @endforeach
    </div>
</div>
```

### 6.2 Category Group Detail View

#### **Category Group Show**
```html
<!-- resources/views/admin/parent-archives/show.blade.php -->
<div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
            {{ $categoryGroup->group_name }} Archives
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Years: {{ $categoryGroup->oldest_year }} - {{ $categoryGroup->newest_year }} |
            Total: {{ $categoryGroup->total_archives }} archives
        </p>
    </div>

    <div class="border-t border-gray-200">
        @foreach($archivesByYear as $year => $archives)
        <div class="bg-gray-50 px-4 py-5 sm:px-6">
            <h4 class="text-md font-medium text-gray-900 mb-3">
                Year {{ $year }} ({{ $archives->count() }} archives)
            </h4>

            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                File #
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Index Number
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Description
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Location
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Status
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach($archives as $archive)
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {{ $archive->file_number }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {{ $archive->index_number }}
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-900">
                                {{ Str::limit($archive->description, 60) }}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                @if($archive->rack_number)
                                    Rak {{ $archive->rack_number }}, Box {{ $archive->box_number }}
                                @else
                                    <span class="text-gray-400">Not assigned</span>
                                @endif
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                    {{ $archive->status === 'Aktif' ? 'bg-green-100 text-green-800' :
                                       ($archive->status === 'Inaktif' ? 'bg-yellow-100 text-yellow-800' :
                                       'bg-gray-100 text-gray-800') }}">
                                    {{ $archive->status }}
                                </span>
                            </td>
                        </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
        @endforeach
    </div>
</div>
```

---

## 7. DEVELOPMENT STEPS

### 7.1 Step 1: Database Migration
```bash
# Create migration for new fields
php artisan make:migration add_parent_archive_fields_to_archives_table
php artisan make:migration create_category_groups_table
php artisan make:migration add_capacity_fields_to_storage_boxes_table

# Run migrations
php artisan migrate
```

### 7.2 Step 2: Model Creation
```bash
# Create new models
php artisan make:model CategoryGroup
php artisan make:model ParentArchive

# Create services
php artisan make:service StorageAllocationService
php artisan make:service CategoryGroupService
```

### 7.3 Step 3: Controller Development
```bash
# Create controllers
php artisan make:controller Admin/ParentArchiveController
php artisan make:controller Admin/CategoryGroupController
php artisan make:controller Admin/BulkArchiveController
```

### 7.4 Step 4: View Creation
```bash
# Create view directories
mkdir -p resources/views/admin/parent-archives
mkdir -p resources/views/admin/category-groups
mkdir -p resources/views/admin/bulk-operations

# Create view files
touch resources/views/admin/parent-archives/index.blade.php
touch resources/views/admin/parent-archives/show.blade.php
touch resources/views/admin/category-groups/index.blade.php
```

### 7.5 Step 5: Route Configuration
```php
// Add routes in routes/web.php
Route::middleware(['auth', 'verified', 'role:admin'])->prefix('admin')->name('admin.')->group(function () {
    // Parent Archive routes
    Route::resource('parent-archives', ParentArchiveController::class);
    Route::get('parent-archives/{categoryGroup}/export', [ParentArchiveController::class, 'export'])
        ->name('parent-archives.export');

    // Category Group routes
    Route::resource('category-groups', CategoryGroupController::class);

    // Bulk operations
    Route::get('bulk-operations', [BulkArchiveController::class, 'index'])
        ->name('bulk-operations.index');
    Route::post('bulk-operations/allocate', [BulkArchiveController::class, 'allocateStorage'])
        ->name('bulk-operations.allocate');
});
```

---

## 8. TESTING SCENARIOS

### 8.1 Category Grouping Test
```php
public function test_category_grouping()
{
    // Create archives with same category
    $archive1 = Archive::factory()->create([
        'category_id' => 1,
        'kurun_waktu_start' => '2016-01-01'
    ]);

    $archive2 = Archive::factory()->create([
        'category_id' => 1,
        'kurun_waktu_start' => '2017-01-01'
    ]);

    // Test category grouping
    $categoryGroup = CategoryGroup::where('category_id', 1)->first();
    $this->assertNotNull($categoryGroup);
    $this->assertEquals(2016, $categoryGroup->oldest_year);
    $this->assertEquals(2, $categoryGroup->total_archives);
}
```

### 8.2 File Number Generation Test
```php
public function test_file_number_generation()
{
    // Create archives in same category and year
    $archive1 = Archive::factory()->create([
        'category_id' => 1,
        'kurun_waktu_start' => '2016-01-01',
        'file_number' => 1
    ]);

    $archive2 = Archive::factory()->create([
        'category_id' => 1,
        'kurun_waktu_start' => '2016-01-01',
        'file_number' => 2
    ]);

    // Test file number generation for new archive
    $newArchive = Archive::factory()->create([
        'category_id' => 1,
        'kurun_waktu_start' => '2016-01-01'
    ]);

    $this->assertEquals(3, $newArchive->generateFileNumber());
}
```

### 8.3 Storage Allocation Test
```php
public function test_storage_allocation()
{
    // Create storage box with capacity 50
    $box = StorageBox::factory()->create([
        'max_capacity' => 50,
        'current_capacity' => 0
    ]);

    // Create 51 archives in same category
    for ($i = 1; $i <= 51; $i++) {
        $archive = Archive::factory()->create([
            'category_id' => 1,
            'kurun_waktu_start' => '2016-01-01'
        ]);

        $service = new StorageAllocationService();
        $service->allocateStorage($archive);
    }

    // Test that first box is full and second box has 1 archive
    $this->assertEquals(50, $box->fresh()->current_capacity);
    $this->assertEquals(1, StorageBox::where('current_capacity', 1)->count());
}
```

---

## 9. DEPLOYMENT GUIDE

### 9.1 Pre-Deployment Checklist
- [ ] Database backup completed
- [ ] All migrations tested on staging
- [ ] Category grouping logic verified
- [ ] File number generation tested
- [ ] Storage allocation algorithm validated
- [ ] Excel export functionality tested

### 9.2 Deployment Steps
```bash
# 1. Backup production database
mysqldump -u username -p database_name > backup_$(date +%Y%m%d_%H%M%S).sql

# 2. Deploy code to production
git pull origin main

# 3. Run migrations
php artisan migrate --force

# 4. Update existing data
php artisan db:seed --class=UpdateArchiveCategoryGroupsSeeder

# 5. Clear all caches
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan cache:clear

# 6. Restart services
sudo systemctl restart nginx
sudo systemctl restart php8.4-fpm
```

### 9.3 Post-Deployment Verification
- [ ] Parent archive dashboard accessible
- [ ] Category grouping working correctly
- [ ] File numbers generating properly
- [ ] Storage allocation functioning
- [ ] Excel export working
- [ ] No errors in application logs

---

## 10. MAINTENANCE & SUPPORT

### 10.1 Regular Maintenance Tasks
```bash
# Daily: Check application logs
tail -f storage/logs/laravel.log

# Weekly: Verify category grouping integrity
php artisan archive:verify-category-groups

# Monthly: Optimize database
php artisan archive:optimize-storage

# Quarterly: Update archive statistics
php artisan archive:update-statistics
```

### 10.2 Troubleshooting Commands
```bash
# Fix category grouping issues
php artisan archive:fix-category-groups

# Recalculate file numbers
php artisan archive:recalculate-file-numbers

# Reallocate storage
php artisan archive:reallocate-storage

# Export category data for analysis
php artisan archive:export-category-analysis
```

### 10.3 Performance Monitoring
- Monitor database query performance
- Track storage allocation efficiency
- Monitor Excel export generation time
- Check category grouping algorithm performance

---

## 📋 **IMPLEMENTATION CHECKLIST**

### Phase 1: Core Infrastructure
- [ ] Database migrations created and tested
- [ ] CategoryGroup model implemented
- [ ] Archive model enhanced with parent relationships
- [ ] StorageAllocationService created
- [ ] Basic category grouping logic implemented

### Phase 2: Parent Archive Management
- [ ] ParentArchiveController created
- [ ] Parent archive views implemented
- [ ] Category group detail views created
- [ ] Related archives linking functionality
- [ ] Bulk operations interface

### Phase 3: Advanced Features
- [ ] Excel export per category/year implemented
- [ ] Smart storage allocation algorithm
- [ ] Next box automation
- [ ] Capacity management system
- [ ] File number generation per year

### Phase 4: User Interface
- [ ] Parent archive dashboard
- [ ] Category-based archive views
- [ ] Bulk operations UI
- [ ] Export management interface
- [ ] Storage allocation visualization

---

## 🎯 **NEXT STEPS FOR NEW CHAT**

When starting a new chat, provide this documentation and specify:

1. **Current Phase**: Which phase to implement first
2. **Priority Features**: Which features are most important
3. **Testing Requirements**: Specific testing scenarios needed
4. **UI Preferences**: Any specific UI/UX requirements
5. **Integration Points**: How to integrate with existing system

**Example message for new chat:**

---

**✅ DOCUMENTATION COMPLETE!**

This comprehensive documentation provides all necessary details for implementing the complex archive system with category-based organization, intelligent file numbering, and Excel export capabilities.
